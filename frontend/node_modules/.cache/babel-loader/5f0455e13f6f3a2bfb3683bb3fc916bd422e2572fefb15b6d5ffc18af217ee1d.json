{"ast":null,"code":"// Simple debug utility for frontend\n\nclass DebugLogger {\n  constructor() {\n    this.logs = [];\n    this.config = {\n      enabled: true,\n      logLevel: 'info',\n      maxLogs: 1000\n    };\n    // Performance tracking methods\n    this.timers = new Map();\n  }\n  info(category, action, message, data) {\n    this.log('info', category, action, message, data);\n  }\n  warn(category, action, message, data) {\n    this.log('warn', category, action, message, data);\n  }\n  error(category, action, message, data) {\n    this.log('error', category, action, message, data);\n  }\n  trace(category, action, message, data) {\n    this.log('trace', category, action, message, data);\n  }\n  trackError(error, category, action) {\n    this.log('error', category, action, error.message, {\n      stack: error.stack,\n      name: error.name\n    });\n  }\n  log(level, category, action, message, data) {\n    if (!this.config.enabled) return;\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      action,\n      message,\n      data\n    };\n    this.logs.push(logEntry);\n\n    // Limit logs to maxLogs\n    if (this.logs.length > this.config.maxLogs) {\n      this.logs = this.logs.slice(-this.config.maxLogs);\n    }\n\n    // Also log to console\n    const consoleMethod = level === 'error' ? 'error' : level === 'warn' ? 'warn' : 'log';\n    console[consoleMethod](`[${category}] ${action}: ${message}`, data || '');\n  }\n  getLogs() {\n    return [...this.logs];\n  }\n  clearLogs() {\n    this.logs = [];\n  }\n  getConfig() {\n    return {\n      ...this.config\n    };\n  }\n  updateConfig(newConfig) {\n    this.config = {\n      ...this.config,\n      ...newConfig\n    };\n  }\n  exportLogs() {\n    return JSON.stringify(this.logs, null, 2);\n  }\n  setEnabled(enabled) {\n    this.config.enabled = enabled;\n  }\n  startTimer(name) {\n    this.timers.set(name, performance.now());\n  }\n  endTimer(name) {\n    const startTime = this.timers.get(name);\n    if (startTime) {\n      const duration = performance.now() - startTime;\n      this.timers.delete(name);\n      return duration;\n    }\n    return 0;\n  }\n\n  // API tracking methods\n  trackAPIRequest(method, url, data) {\n    this.info('api', 'request', `${method} ${url}`, data);\n  }\n  trackAPIResponse(method, url, status, data) {\n    this.info('api', 'response', `${method} ${url} - ${status}`, data);\n  }\n}\nexport const debug = new DebugLogger();","map":{"version":3,"names":["DebugLogger","constructor","logs","config","enabled","logLevel","maxLogs","timers","Map","info","category","action","message","data","log","warn","error","trace","trackError","stack","name","level","logEntry","timestamp","Date","toISOString","push","length","slice","consoleMethod","console","getLogs","clearLogs","getConfig","updateConfig","newConfig","exportLogs","JSON","stringify","setEnabled","startTimer","set","performance","now","endTimer","startTime","get","duration","delete","trackAPIRequest","method","url","trackAPIResponse","status","debug"],"sources":["/home/crw/Programming/Dianoia/frontend/src/utils/debug.ts"],"sourcesContent":["// Simple debug utility for frontend\ninterface DebugLog {\n    timestamp: string;\n    level: string;\n    category: string;\n    action: string;\n    message: string;\n    data?: any;\n}\n\ninterface DebugConfig {\n    enabled: boolean;\n    logLevel: 'trace' | 'info' | 'warn' | 'error';\n    maxLogs: number;\n}\n\nclass DebugLogger {\n    private logs: DebugLog[] = [];\n    private config: DebugConfig = {\n        enabled: true,\n        logLevel: 'info',\n        maxLogs: 1000\n    };\n\n    info(category: string, action: string, message: string, data?: any) {\n        this.log('info', category, action, message, data);\n    }\n\n    warn(category: string, action: string, message: string, data?: any) {\n        this.log('warn', category, action, message, data);\n    }\n\n    error(category: string, action: string, message: string, data?: any) {\n        this.log('error', category, action, message, data);\n    }\n\n    trace(category: string, action: string, message: string, data?: any) {\n        this.log('trace', category, action, message, data);\n    }\n\n    trackError(error: Error, category: string, action: string) {\n        this.log('error', category, action, error.message, {\n            stack: error.stack,\n            name: error.name\n        });\n    }\n\n    private log(level: string, category: string, action: string, message: string, data?: any) {\n        if (!this.config.enabled) return;\n\n        const logEntry: DebugLog = {\n            timestamp: new Date().toISOString(),\n            level,\n            category,\n            action,\n            message,\n            data\n        };\n\n        this.logs.push(logEntry);\n\n        // Limit logs to maxLogs\n        if (this.logs.length > this.config.maxLogs) {\n            this.logs = this.logs.slice(-this.config.maxLogs);\n        }\n\n        // Also log to console\n        const consoleMethod = level === 'error' ? 'error' : level === 'warn' ? 'warn' : 'log';\n        console[consoleMethod](`[${category}] ${action}: ${message}`, data || '');\n    }\n\n    getLogs(): DebugLog[] {\n        return [...this.logs];\n    }\n\n    clearLogs() {\n        this.logs = [];\n    }\n\n    getConfig(): DebugConfig {\n        return { ...this.config };\n    }\n\n    updateConfig(newConfig: Partial<DebugConfig>) {\n        this.config = { ...this.config, ...newConfig };\n    }\n\n    exportLogs(): string {\n        return JSON.stringify(this.logs, null, 2);\n    }\n\n    setEnabled(enabled: boolean) {\n        this.config.enabled = enabled;\n    }\n\n    // Performance tracking methods\n    private timers: Map<string, number> = new Map();\n\n    startTimer(name: string): void {\n        this.timers.set(name, performance.now());\n    }\n\n    endTimer(name: string): number {\n        const startTime = this.timers.get(name);\n        if (startTime) {\n            const duration = performance.now() - startTime;\n            this.timers.delete(name);\n            return duration;\n        }\n        return 0;\n    }\n\n    // API tracking methods\n    trackAPIRequest(method: string, url: string, data?: any): void {\n        this.info('api', 'request', `${method} ${url}`, data);\n    }\n\n    trackAPIResponse(method: string, url: string, status: number, data?: any): void {\n        this.info('api', 'response', `${method} ${url} - ${status}`, data);\n    }\n}\n\nexport const debug = new DebugLogger(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}