{"ast":null,"code":"import { debug } from '../utils/debug';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Generate a unique session ID for this browser session\nconst sessionId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\ndebug.info('api_service', 'initialization', 'API service initialized', {\n  apiBaseUrl: API_BASE_URL,\n  sessionId,\n  environment: process.env.NODE_ENV || 'development'\n});\nexport async function setupAPIKey(provider, apiKey, model) {\n  debug.startTimer('setup_api_key');\n  try {\n    debug.info('api_service', 'setup_key_start', 'Setting up API key', {\n      provider,\n      model,\n      hasApiKey: !!apiKey,\n      sessionId\n    });\n    const requestBody = {\n      sessionId,\n      provider,\n      apiKey,\n      model\n    };\n    debug.trackAPIRequest('POST', `${API_BASE_URL}/api/setup-key`, requestBody);\n    const response = await fetch(`${API_BASE_URL}/api/setup-key`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    debug.trackAPIResponse('POST', `${API_BASE_URL}/api/setup-key`, response.status);\n    if (!response.ok) {\n      const errorData = await response.json();\n      debug.error('api_service', 'setup_key_error', 'API key setup failed', {\n        status: response.status,\n        error: errorData,\n        provider,\n        sessionId\n      });\n      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n    }\n\n    // Store the provider info in localStorage for UI display\n    localStorage.setItem('dianoia_provider', provider);\n    localStorage.setItem('dianoia_model', model || '');\n    debug.info('api_service', 'setup_key_success', 'API key setup completed successfully', {\n      provider,\n      model,\n      sessionId\n    });\n  } catch (error) {\n    debug.trackError(error, 'api_service', 'setup_key_failed');\n    console.error('Error setting up API key:', error);\n    throw error;\n  } finally {\n    debug.endTimer('setup_api_key');\n  }\n}\nexport async function generateAndAddNode(sourceNode, action) {\n  debug.startTimer('generate_and_add_node');\n  try {\n    var _data$newNode, _data$newEdge;\n    debug.info('api_service', 'generate_request_start', 'Starting generate request', {\n      action,\n      sourceNodeId: sourceNode.id,\n      sourceNodeLabel: sourceNode.data.label,\n      sessionId\n    });\n    const requestBody = {\n      sourceNode,\n      action,\n      sessionId\n    };\n    debug.trackAPIRequest('POST', `${API_BASE_URL}/api/generate`, requestBody);\n    const response = await fetch(`${API_BASE_URL}/api/generate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      debug.error('api_service', 'generate_request_error', 'Generate request failed', {\n        status: response.status,\n        error: errorData,\n        action,\n        sourceNodeId: sourceNode.id,\n        sessionId\n      });\n      throw new Error(errorData.message || 'Failed to generate argument');\n    }\n    const data = await response.json();\n    debug.trackAPIResponse('POST', `${API_BASE_URL}/api/generate`, response.status);\n    debug.info('api_service', 'generate_request_success', 'Generate request completed successfully', {\n      action,\n      sourceNodeId: sourceNode.id,\n      newNodeId: (_data$newNode = data.newNode) === null || _data$newNode === void 0 ? void 0 : _data$newNode.id,\n      newEdgeId: (_data$newEdge = data.newEdge) === null || _data$newEdge === void 0 ? void 0 : _data$newEdge.id,\n      sessionId\n    });\n    return data;\n  } catch (error) {\n    debug.trackError(error, 'api_service', 'generate_request_failed');\n    console.error('API Error:', error);\n    throw error;\n  } finally {\n    debug.endTimer('generate_and_add_node');\n  }\n}","map":{"version":3,"names":["debug","API_BASE_URL","process","env","REACT_APP_API_URL","sessionId","Math","random","toString","substring","info","apiBaseUrl","environment","NODE_ENV","setupAPIKey","provider","apiKey","model","startTimer","hasApiKey","requestBody","trackAPIRequest","response","fetch","method","headers","body","JSON","stringify","trackAPIResponse","status","ok","errorData","json","error","Error","message","localStorage","setItem","trackError","console","endTimer","generateAndAddNode","sourceNode","action","_data$newNode","_data$newEdge","sourceNodeId","id","sourceNodeLabel","data","label","newNodeId","newNode","newEdgeId","newEdge"],"sources":["/home/crw/Programming/Dianoia/frontend/src/services/api.ts"],"sourcesContent":["import { ArgumentNode, Action } from '../types';\nimport { debug } from '../utils/debug';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Generate a unique session ID for this browser session\nconst sessionId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n\ndebug.info('api_service', 'initialization', 'API service initialized', {\n    apiBaseUrl: API_BASE_URL,\n    sessionId,\n    environment: process.env.NODE_ENV || 'development'\n});\n\nexport async function setupAPIKey(\n    provider: 'openai' | 'openrouter',\n    apiKey: string,\n    model?: string\n): Promise<void> {\n    debug.startTimer('setup_api_key');\n\n    try {\n        debug.info('api_service', 'setup_key_start', 'Setting up API key', {\n            provider,\n            model,\n            hasApiKey: !!apiKey,\n            sessionId\n        });\n\n        const requestBody = {\n            sessionId,\n            provider,\n            apiKey,\n            model,\n        };\n\n        debug.trackAPIRequest('POST', `${API_BASE_URL}/api/setup-key`, requestBody);\n\n        const response = await fetch(`${API_BASE_URL}/api/setup-key`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n\n        debug.trackAPIResponse('POST', `${API_BASE_URL}/api/setup-key`, response.status);\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            debug.error('api_service', 'setup_key_error', 'API key setup failed', {\n                status: response.status,\n                error: errorData,\n                provider,\n                sessionId\n            });\n            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n        }\n\n        // Store the provider info in localStorage for UI display\n        localStorage.setItem('dianoia_provider', provider);\n        localStorage.setItem('dianoia_model', model || '');\n\n        debug.info('api_service', 'setup_key_success', 'API key setup completed successfully', {\n            provider,\n            model,\n            sessionId\n        });\n\n    } catch (error) {\n        debug.trackError(error as Error, 'api_service', 'setup_key_failed');\n        console.error('Error setting up API key:', error);\n        throw error;\n    } finally {\n        debug.endTimer('setup_api_key');\n    }\n}\n\nexport async function generateAndAddNode(\n    sourceNode: ArgumentNode,\n    action: Action\n): Promise<{ newNode: ArgumentNode; newEdge: any }> {\n    debug.startTimer('generate_and_add_node');\n\n    try {\n        debug.info('api_service', 'generate_request_start', 'Starting generate request', {\n            action,\n            sourceNodeId: sourceNode.id,\n            sourceNodeLabel: sourceNode.data.label,\n            sessionId\n        });\n\n        const requestBody = {\n            sourceNode,\n            action,\n            sessionId,\n        };\n\n        debug.trackAPIRequest('POST', `${API_BASE_URL}/api/generate`, requestBody);\n\n        const response = await fetch(`${API_BASE_URL}/api/generate`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            debug.error('api_service', 'generate_request_error', 'Generate request failed', {\n                status: response.status,\n                error: errorData,\n                action,\n                sourceNodeId: sourceNode.id,\n                sessionId\n            });\n            throw new Error(errorData.message || 'Failed to generate argument');\n        }\n\n        const data = await response.json();\n\n        debug.trackAPIResponse('POST', `${API_BASE_URL}/api/generate`, response.status);\n\n        debug.info('api_service', 'generate_request_success', 'Generate request completed successfully', {\n            action,\n            sourceNodeId: sourceNode.id,\n            newNodeId: data.newNode?.id,\n            newEdgeId: data.newEdge?.id,\n            sessionId\n        });\n\n        return data;\n    } catch (error) {\n        debug.trackError(error as Error, 'api_service', 'generate_request_failed');\n        console.error('API Error:', error);\n        throw error;\n    } finally {\n        debug.endTimer('generate_and_add_node');\n    }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}